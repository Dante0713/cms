<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-19 02:38:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Book
 *
 * @ORM\Entity(repositoryClass="BookRepository")
 * @ORM\Table(name="book")
 */
class Book implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * 上傳的使用者ID
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $upload_user_id;

    /**
     * 書目名稱
     *
     * @ORM\Column(type="string", length=100, nullable=true)
     */
    protected $title;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $isbn;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $author;

    /**
     * 釋者
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $translator;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $publish_information;

    /**
     * @ORM\Column(type="date", nullable=true)
     */
    protected $publish_year;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $version;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $cover_image;

    /**
     * @ORM\Column(name="`language`", type="string", length=45, nullable=true)
     */
    protected $language;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $currency;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $price;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $keyword;

    /**
     * @ORM\Column(type="string", length=500, nullable=true)
     */
    protected $introduction;

    /**
     * 是否上線?
     *
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $is_online;

    /**
     * 屬於愛的書庫裏面
     *
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $is_love_stack;

    /**
     * 扶輪社指定書?
     *
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $is_rotary;

    /**
     * 適用年級
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $grade;

    /**
     * @ORM\OneToMany(targetEntity="BookHasBookClassification", mappedBy="book")
     * @ORM\JoinColumn(name="id", referencedColumnName="book_id", nullable=false)
     */
    protected $bookHasBookClassifications;

    /**
     * @ORM\OneToMany(targetEntity="BookHasReadingCertificate", mappedBy="book")
     * @ORM\JoinColumn(name="id", referencedColumnName="book_id", nullable=false)
     */
    protected $bookHasReadingCertificates;

    /**
     * @ORM\OneToOne(targetEntity="BookclubHasStudent", mappedBy="book")
     */
    protected $bookclubHasStudent;

    /**
     * @ORM\OneToMany(targetEntity="SchoolHasBook", mappedBy="book")
     * @ORM\JoinColumn(name="id", referencedColumnName="book_id", nullable=false)
     */
    protected $schoolHasBooks;

    public function __construct()
    {
        $this->bookHasBookClassifications = new ArrayCollection();
        $this->bookHasReadingCertificates = new ArrayCollection();
        $this->bookclubHasStudents = new ArrayCollection();
        $this->schoolHasBooks = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Book
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of upload_user_id.
     *
     * @param integer $upload_user_id
     * @return \Base\Entity\Book
     */
    public function setUploadUserId($upload_user_id)
    {
        $this->upload_user_id = $upload_user_id;

        return $this;
    }

    /**
     * Get the value of upload_user_id.
     *
     * @return integer
     */
    public function getUploadUserId()
    {
        return $this->upload_user_id;
    }

    /**
     * Set the value of title.
     *
     * @param string $title
     * @return \Base\Entity\Book
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get the value of title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set the value of isbn.
     *
     * @param string $isbn
     * @return \Base\Entity\Book
     */
    public function setIsbn($isbn)
    {
        $this->isbn = $isbn;

        return $this;
    }

    /**
     * Get the value of isbn.
     *
     * @return string
     */
    public function getIsbn()
    {
        return $this->isbn;
    }

    /**
     * Set the value of author.
     *
     * @param string $author
     * @return \Base\Entity\Book
     */
    public function setAuthor($author)
    {
        $this->author = $author;

        return $this;
    }

    /**
     * Get the value of author.
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * Set the value of translator.
     *
     * @param string $translator
     * @return \Base\Entity\Book
     */
    public function setTranslator($translator)
    {
        $this->translator = $translator;

        return $this;
    }

    /**
     * Get the value of translator.
     *
     * @return string
     */
    public function getTranslator()
    {
        return $this->translator;
    }

    /**
     * Set the value of publish_information.
     *
     * @param string $publish_information
     * @return \Base\Entity\Book
     */
    public function setPublishInformation($publish_information)
    {
        $this->publish_information = $publish_information;

        return $this;
    }

    /**
     * Get the value of publish_information.
     *
     * @return string
     */
    public function getPublishInformation()
    {
        return $this->publish_information;
    }

    /**
     * Set the value of publish_year.
     *
     * @param \DateTime $publish_year
     * @return \Base\Entity\Book
     */
    public function setPublishYear($publish_year)
    {
        $this->publish_year = $publish_year;

        return $this;
    }

    /**
     * Get the value of publish_year.
     *
     * @return \DateTime
     */
    public function getPublishYear()
    {
        return $this->publish_year;
    }

    /**
     * Set the value of version.
     *
     * @param string $version
     * @return \Base\Entity\Book
     */
    public function setVersion($version)
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Get the value of version.
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set the value of cover_image.
     *
     * @param string $cover_image
     * @return \Base\Entity\Book
     */
    public function setCoverImage($cover_image)
    {
        $this->cover_image = $cover_image;

        return $this;
    }

    /**
     * Get the value of cover_image.
     *
     * @return string
     */
    public function getCoverImage()
    {
        return $this->cover_image;
    }

    /**
     * Set the value of language.
     *
     * @param string $language
     * @return \Base\Entity\Book
     */
    public function setLanguage($language)
    {
        $this->language = $language;

        return $this;
    }

    /**
     * Get the value of language.
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set the value of currency.
     *
     * @param string $currency
     * @return \Base\Entity\Book
     */
    public function setCurrency($currency)
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Get the value of currency.
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * Set the value of price.
     *
     * @param integer $price
     * @return \Base\Entity\Book
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get the value of price.
     *
     * @return integer
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set the value of keyword.
     *
     * @param string $keyword
     * @return \Base\Entity\Book
     */
    public function setKeyword($keyword)
    {
        $this->keyword = $keyword;

        return $this;
    }

    /**
     * Get the value of keyword.
     *
     * @return string
     */
    public function getKeyword()
    {
        return $this->keyword;
    }

    /**
     * Set the value of introduction.
     *
     * @param string $introduction
     * @return \Base\Entity\Book
     */
    public function setIntroduction($introduction)
    {
        $this->introduction = $introduction;

        return $this;
    }

    /**
     * Get the value of introduction.
     *
     * @return string
     */
    public function getIntroduction()
    {
        return $this->introduction;
    }

    /**
     * Set the value of is_online.
     *
     * @param boolean $is_online
     * @return \Base\Entity\Book
     */
    public function setIsOnline($is_online)
    {
        $this->is_online = $is_online;

        return $this;
    }

    /**
     * Get the value of is_online.
     *
     * @return boolean
     */
    public function getIsOnline()
    {
        return $this->is_online;
    }

    /**
     * Set the value of is_love_stack.
     *
     * @param boolean $is_love_stack
     * @return \Base\Entity\Book
     */
    public function setIsLoveStack($is_love_stack)
    {
        $this->is_love_stack = $is_love_stack;

        return $this;
    }

    /**
     * Get the value of is_love_stack.
     *
     * @return boolean
     */
    public function getIsLoveStack()
    {
        return $this->is_love_stack;
    }

    /**
     * Set the value of is_rotary.
     *
     * @param boolean $is_rotary
     * @return \Base\Entity\Book
     */
    public function setIsRotary($is_rotary)
    {
        $this->is_rotary = $is_rotary;

        return $this;
    }

    /**
     * Get the value of is_rotary.
     *
     * @return boolean
     */
    public function getIsRotary()
    {
        return $this->is_rotary;
    }

    /**
     * Set the value of grade.
     *
     * @param integer $grade
     * @return \Base\Entity\Book
     */
    public function setGrade($grade)
    {
        $this->grade = $grade;

        return $this;
    }

    /**
     * Get the value of grade.
     *
     * @return integer
     */
    public function getGrade()
    {
        return $this->grade;
    }

    /**
     * Add BookHasBookClassification entity to collection (one to many).
     *
     * @param \Base\Entity\BookHasBookClassification $bookHasBookClassification
     * @return \Base\Entity\Book
     */
    public function addBookHasBookClassification(BookHasBookClassification $bookHasBookClassification)
    {
        $this->bookHasBookClassifications[] = $bookHasBookClassification;

        return $this;
    }

    /**
     * Remove BookHasBookClassification entity from collection (one to many).
     *
     * @param \Base\Entity\BookHasBookClassification $bookHasBookClassification
     * @return \Base\Entity\Book
     */
    public function removeBookHasBookClassification(BookHasBookClassification $bookHasBookClassification)
    {
        $this->bookHasBookClassifications->removeElement($bookHasBookClassification);

        return $this;
    }

    /**
     * Get BookHasBookClassification entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBookHasBookClassifications()
    {
        return $this->bookHasBookClassifications;
    }

    /**
     * Add BookHasReadingCertificate entity to collection (one to many).
     *
     * @param \Base\Entity\BookHasReadingCertificate $bookHasReadingCertificate
     * @return \Base\Entity\Book
     */
    public function addBookHasReadingCertificate(BookHasReadingCertificate $bookHasReadingCertificate)
    {
        $this->bookHasReadingCertificates[] = $bookHasReadingCertificate;

        return $this;
    }

    /**
     * Remove BookHasReadingCertificate entity from collection (one to many).
     *
     * @param \Base\Entity\BookHasReadingCertificate $bookHasReadingCertificate
     * @return \Base\Entity\Book
     */
    public function removeBookHasReadingCertificate(BookHasReadingCertificate $bookHasReadingCertificate)
    {
        $this->bookHasReadingCertificates->removeElement($bookHasReadingCertificate);

        return $this;
    }

    /**
     * Get BookHasReadingCertificate entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBookHasReadingCertificates()
    {
        return $this->bookHasReadingCertificates;
    }

    /**
     * Set BookclubHasStudent entity (one to one).
     *
     * @param \Base\Entity\BookclubHasStudent $bookclubHasStudent
     * @return \Base\Entity\Book
     */
    public function setBookclubHasStudent(BookclubHasStudent $bookclubHasStudent = null)
    {
        $bookclubHasStudent->setBook($this);
        $this->bookclubHasStudent = $bookclubHasStudent;

        return $this;
    }

    /**
     * Get BookclubHasStudent entity (one to one).
     *
     * @return \Base\Entity\BookclubHasStudent
     */
    public function getBookclubHasStudent()
    {
        return $this->bookclubHasStudent;
    }

    /**
     * Add SchoolHasBook entity to collection (one to many).
     *
     * @param \Base\Entity\SchoolHasBook $schoolHasBook
     * @return \Base\Entity\Book
     */
    public function addSchoolHasBook(SchoolHasBook $schoolHasBook)
    {
        $this->schoolHasBooks[] = $schoolHasBook;

        return $this;
    }

    /**
     * Remove SchoolHasBook entity from collection (one to many).
     *
     * @param \Base\Entity\SchoolHasBook $schoolHasBook
     * @return \Base\Entity\Book
     */
    public function removeSchoolHasBook(SchoolHasBook $schoolHasBook)
    {
        $this->schoolHasBooks->removeElement($schoolHasBook);

        return $this;
    }

    /**
     * Get SchoolHasBook entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchoolHasBooks()
    {
        return $this->schoolHasBooks;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'upload_user_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'title',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'isbn',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'author',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'translator',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'publish_information',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'publish_year',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'version',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'cover_image',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'language',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'currency',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'price',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'keyword',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'introduction',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_online',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_love_stack',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_rotary',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'grade',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'upload_user_id', 'title', 'isbn', 'author', 'translator', 'publish_information', 'publish_year', 'version', 'cover_image', 'language', 'currency', 'price', 'keyword', 'introduction', 'is_online', 'is_love_stack', 'is_rotary', 'grade');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'upload_user_id', 'title', 'isbn', 'author', 'translator', 'publish_information', 'publish_year', 'version', 'cover_image', 'language', 'currency', 'price', 'keyword', 'introduction', 'is_online', 'is_love_stack', 'is_rotary', 'grade');
    }
}