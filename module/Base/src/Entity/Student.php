<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-19 02:38:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Student
 *
 * @ORM\Entity(repositoryClass="StudentRepository")
 * @ORM\Table(name="student")
 */
class Student implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $user_id;

    /**
     * @ORM\Column(name="`name`", type="string", length=45)
     */
    protected $name;

    /**
     * @ORM\Column(type="string", length=65)
     */
    protected $edu_key;

    /**
     * @ORM\Column(type="string", length=45)
     */
    protected $stud_no;

    /**
     * @ORM\Column(type="string", length=6)
     */
    protected $gender;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $admission_date;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $gradutaion_date;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $last_update;

    /**
     * @ORM\OneToMany(targetEntity="BookclubHasStudent", mappedBy="student")
     * @ORM\JoinColumn(name="id", referencedColumnName="student_id", nullable=false)
     */
    protected $bookclubHasStudents;

    /**
     * @ORM\OneToMany(targetEntity="SchoolHasStudent", mappedBy="student")
     * @ORM\JoinColumn(name="id", referencedColumnName="student_id", nullable=false)
     */
    protected $schoolHasStudents;

    /**
     * @ORM\OneToMany(targetEntity="SemesterStudent", mappedBy="student")
     * @ORM\JoinColumn(name="id", referencedColumnName="student_id", nullable=false)
     */
    protected $semesterStudents;

    /**
     * @ORM\OneToMany(targetEntity="StudentHasReadingCertificate", mappedBy="student")
     * @ORM\JoinColumn(name="id", referencedColumnName="student_id", nullable=false)
     */
    protected $studentHasReadingCertificates;

    /**
     * @ORM\OneToOne(targetEntity="User", inversedBy="student")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id", nullable=false)
     */
    protected $user;

    public function __construct()
    {
        $this->bookclubHasStudents = new ArrayCollection();
        $this->schoolHasStudents = new ArrayCollection();
        $this->semesterStudents = new ArrayCollection();
        $this->studentHasReadingCertificates = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Student
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of user_id.
     *
     * @param integer $user_id
     * @return \Base\Entity\Student
     */
    public function setUserId($user_id)
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Get the value of user_id.
     *
     * @return integer
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Set the value of name.
     *
     * @param string $name
     * @return \Base\Entity\Student
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get the value of name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the value of edu_key.
     *
     * @param string $edu_key
     * @return \Base\Entity\Student
     */
    public function setEduKey($edu_key)
    {
        $this->edu_key = $edu_key;

        return $this;
    }

    /**
     * Get the value of edu_key.
     *
     * @return string
     */
    public function getEduKey()
    {
        return $this->edu_key;
    }

    /**
     * Set the value of stud_no.
     *
     * @param string $stud_no
     * @return \Base\Entity\Student
     */
    public function setStudNo($stud_no)
    {
        $this->stud_no = $stud_no;

        return $this;
    }

    /**
     * Get the value of stud_no.
     *
     * @return string
     */
    public function getStudNo()
    {
        return $this->stud_no;
    }

    /**
     * Set the value of gender.
     *
     * @param string $gender
     * @return \Base\Entity\Student
     */
    public function setGender($gender)
    {
        $this->gender = $gender;

        return $this;
    }

    /**
     * Get the value of gender.
     *
     * @return string
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Set the value of admission_date.
     *
     * @param string $admission_date
     * @return \Base\Entity\Student
     */
    public function setAdmissionDate($admission_date)
    {
        $this->admission_date = $admission_date;

        return $this;
    }

    /**
     * Get the value of admission_date.
     *
     * @return string
     */
    public function getAdmissionDate()
    {
        return $this->admission_date;
    }

    /**
     * Set the value of gradutaion_date.
     *
     * @param string $gradutaion_date
     * @return \Base\Entity\Student
     */
    public function setGradutaionDate($gradutaion_date)
    {
        $this->gradutaion_date = $gradutaion_date;

        return $this;
    }

    /**
     * Get the value of gradutaion_date.
     *
     * @return string
     */
    public function getGradutaionDate()
    {
        return $this->gradutaion_date;
    }

    /**
     * Set the value of last_update.
     *
     * @param \DateTime $last_update
     * @return \Base\Entity\Student
     */
    public function setLastUpdate($last_update)
    {
        $this->last_update = $last_update;

        return $this;
    }

    /**
     * Get the value of last_update.
     *
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->last_update;
    }

    /**
     * Add BookclubHasStudent entity to collection (one to many).
     *
     * @param \Base\Entity\BookclubHasStudent $bookclubHasStudent
     * @return \Base\Entity\Student
     */
    public function addBookclubHasStudent(BookclubHasStudent $bookclubHasStudent)
    {
        $this->bookclubHasStudents[] = $bookclubHasStudent;

        return $this;
    }

    /**
     * Remove BookclubHasStudent entity from collection (one to many).
     *
     * @param \Base\Entity\BookclubHasStudent $bookclubHasStudent
     * @return \Base\Entity\Student
     */
    public function removeBookclubHasStudent(BookclubHasStudent $bookclubHasStudent)
    {
        $this->bookclubHasStudents->removeElement($bookclubHasStudent);

        return $this;
    }

    /**
     * Get BookclubHasStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBookclubHasStudents()
    {
        return $this->bookclubHasStudents;
    }

    /**
     * Add SchoolHasStudent entity to collection (one to many).
     *
     * @param \Base\Entity\SchoolHasStudent $schoolHasStudent
     * @return \Base\Entity\Student
     */
    public function addSchoolHasStudent(SchoolHasStudent $schoolHasStudent)
    {
        $this->schoolHasStudents[] = $schoolHasStudent;

        return $this;
    }

    /**
     * Remove SchoolHasStudent entity from collection (one to many).
     *
     * @param \Base\Entity\SchoolHasStudent $schoolHasStudent
     * @return \Base\Entity\Student
     */
    public function removeSchoolHasStudent(SchoolHasStudent $schoolHasStudent)
    {
        $this->schoolHasStudents->removeElement($schoolHasStudent);

        return $this;
    }

    /**
     * Get SchoolHasStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchoolHasStudents()
    {
        return $this->schoolHasStudents;
    }

    /**
     * Add SemesterStudent entity to collection (one to many).
     *
     * @param \Base\Entity\SemesterStudent $semesterStudent
     * @return \Base\Entity\Student
     */
    public function addSemesterStudent(SemesterStudent $semesterStudent)
    {
        $this->semesterStudents[] = $semesterStudent;

        return $this;
    }

    /**
     * Remove SemesterStudent entity from collection (one to many).
     *
     * @param \Base\Entity\SemesterStudent $semesterStudent
     * @return \Base\Entity\Student
     */
    public function removeSemesterStudent(SemesterStudent $semesterStudent)
    {
        $this->semesterStudents->removeElement($semesterStudent);

        return $this;
    }

    /**
     * Get SemesterStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSemesterStudents()
    {
        return $this->semesterStudents;
    }

    /**
     * Add StudentHasReadingCertificate entity to collection (one to many).
     *
     * @param \Base\Entity\StudentHasReadingCertificate $studentHasReadingCertificate
     * @return \Base\Entity\Student
     */
    public function addStudentHasReadingCertificate(StudentHasReadingCertificate $studentHasReadingCertificate)
    {
        $this->studentHasReadingCertificates[] = $studentHasReadingCertificate;

        return $this;
    }

    /**
     * Remove StudentHasReadingCertificate entity from collection (one to many).
     *
     * @param \Base\Entity\StudentHasReadingCertificate $studentHasReadingCertificate
     * @return \Base\Entity\Student
     */
    public function removeStudentHasReadingCertificate(StudentHasReadingCertificate $studentHasReadingCertificate)
    {
        $this->studentHasReadingCertificates->removeElement($studentHasReadingCertificate);

        return $this;
    }

    /**
     * Get StudentHasReadingCertificate entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getStudentHasReadingCertificates()
    {
        return $this->studentHasReadingCertificates;
    }

    /**
     * Set User entity (one to one).
     *
     * @param \Base\Entity\User $user
     * @return \Base\Entity\Student
     */
    public function setUser(User $user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get User entity (one to one).
     *
     * @return \Base\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'user_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'name',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'edu_key',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'stud_no',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'gender',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'admission_date',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'gradutaion_date',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'last_update',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'user_id', 'name', 'edu_key', 'stud_no', 'gender', 'admission_date', 'gradutaion_date', 'last_update');
        $relationFields = array('user');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'user_id', 'name', 'edu_key', 'stud_no', 'gender', 'admission_date', 'gradutaion_date', 'last_update');
    }
}