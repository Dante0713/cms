<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-10 06:21:28.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\User
 *
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\Table(name="`user`", uniqueConstraints={@ORM\UniqueConstraint(name="id_UNIQUE", columns={"id"}), @ORM\UniqueConstraint(name="username_UNIQUE", columns={"username"})})
 */
class User implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(name="`type`", type="string", length=45)
     */
    protected $type;

    /**
     * @ORM\Column(type="string", length=45)
     */
    protected $username;

    /**
     * @ORM\Column(name="`password`", type="string", length=45)
     */
    protected $password;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $chinese_name;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $english_name;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $nickname;

    /**
     * 0:女 1:男
     *
     * @ORM\Column(type="smallint", nullable=true)
     */
    protected $gender;

    /**
     * 身份證號
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $identification_number;

    /**
     * @ORM\Column(type="string", length=100, nullable=true)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $religion;

    /**
     * 帳號狀態 0:凍結  1:正常 2.幽靈帳號
     *
     * @ORM\Column(name="`status`", type="smallint", nullable=true)
     */
    protected $status;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $create_time;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $update_time;

    /**
     * @ORM\Column(type="string", length=100, nullable=true)
     */
    protected $alternate_email;

    /**
     * @ORM\OneToOne(targetEntity="BookclubComment", mappedBy="user")
     */
    protected $bookclubComment;

    /**
     * @ORM\OneToOne(targetEntity="BookclubDiscuss", mappedBy="user")
     */
    protected $bookclubDiscuss;

    /**
     * @ORM\OneToMany(targetEntity="Menu", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false)
     */
    protected $menus;

    /**
     * @ORM\OneToMany(targetEntity="Page", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false)
     */
    protected $pages;

    /**
     * @ORM\OneToOne(targetEntity="Student", mappedBy="user")
     */
    protected $student;

    /**
     * @ORM\OneToMany(targetEntity="Teacher", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false)
     */
    protected $teachers;

    /**
     * @ORM\OneToMany(targetEntity="UserHasRole", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false)
     */
    protected $userHasRoles;

    public function __construct()
    {
        $this->bookclubComments = new ArrayCollection();
        $this->bookclubDiscusses = new ArrayCollection();
        $this->menus = new ArrayCollection();
        $this->pages = new ArrayCollection();
        $this->students = new ArrayCollection();
        $this->teachers = new ArrayCollection();
        $this->userHasRoles = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\User
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of type.
     *
     * @param string $type
     * @return \Base\Entity\User
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get the value of type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set the value of username.
     *
     * @param string $username
     * @return \Base\Entity\User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get the value of username.
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set the value of password.
     *
     * @param string $password
     * @return \Base\Entity\User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get the value of password.
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set the value of chinese_name.
     *
     * @param string $chinese_name
     * @return \Base\Entity\User
     */
    public function setChineseName($chinese_name)
    {
        $this->chinese_name = $chinese_name;

        return $this;
    }

    /**
     * Get the value of chinese_name.
     *
     * @return string
     */
    public function getChineseName()
    {
        return $this->chinese_name;
    }

    /**
     * Set the value of english_name.
     *
     * @param string $english_name
     * @return \Base\Entity\User
     */
    public function setEnglishName($english_name)
    {
        $this->english_name = $english_name;

        return $this;
    }

    /**
     * Get the value of english_name.
     *
     * @return string
     */
    public function getEnglishName()
    {
        return $this->english_name;
    }

    /**
     * Set the value of nickname.
     *
     * @param string $nickname
     * @return \Base\Entity\User
     */
    public function setNickname($nickname)
    {
        $this->nickname = $nickname;

        return $this;
    }

    /**
     * Get the value of nickname.
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set the value of gender.
     *
     * @param integer $gender
     * @return \Base\Entity\User
     */
    public function setGender($gender)
    {
        $this->gender = $gender;

        return $this;
    }

    /**
     * Get the value of gender.
     *
     * @return integer
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Set the value of identification_number.
     *
     * @param string $identification_number
     * @return \Base\Entity\User
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->identification_number = $identification_number;

        return $this;
    }

    /**
     * Get the value of identification_number.
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->identification_number;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Base\Entity\User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of religion.
     *
     * @param string $religion
     * @return \Base\Entity\User
     */
    public function setReligion($religion)
    {
        $this->religion = $religion;

        return $this;
    }

    /**
     * Get the value of religion.
     *
     * @return string
     */
    public function getReligion()
    {
        return $this->religion;
    }

    /**
     * Set the value of status.
     *
     * @param integer $status
     * @return \Base\Entity\User
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of create_time.
     *
     * @param \DateTime $create_time
     * @return \Base\Entity\User
     */
    public function setCreateTime($create_time)
    {
        $this->create_time = $create_time;

        return $this;
    }

    /**
     * Get the value of create_time.
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    /**
     * Set the value of update_time.
     *
     * @param \DateTime $update_time
     * @return \Base\Entity\User
     */
    public function setUpdateTime($update_time)
    {
        $this->update_time = $update_time;

        return $this;
    }

    /**
     * Get the value of update_time.
     *
     * @return \DateTime
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    /**
     * Set the value of alternate_email.
     *
     * @param string $alternate_email
     * @return \Base\Entity\User
     */
    public function setAlternateEmail($alternate_email)
    {
        $this->alternate_email = $alternate_email;

        return $this;
    }

    /**
     * Get the value of alternate_email.
     *
     * @return string
     */
    public function getAlternateEmail()
    {
        return $this->alternate_email;
    }

    /**
     * Set BookclubComment entity (one to one).
     *
     * @param \Base\Entity\BookclubComment $bookclubComment
     * @return \Base\Entity\User
     */
    public function setBookclubComment(BookclubComment $bookclubComment = null)
    {
        $bookclubComment->setUser($this);
        $this->bookclubComment = $bookclubComment;

        return $this;
    }

    /**
     * Get BookclubComment entity (one to one).
     *
     * @return \Base\Entity\BookclubComment
     */
    public function getBookclubComment()
    {
        return $this->bookclubComment;
    }

    /**
     * Set BookclubDiscuss entity (one to one).
     *
     * @param \Base\Entity\BookclubDiscuss $bookclubDiscuss
     * @return \Base\Entity\User
     */
    public function setBookclubDiscuss(BookclubDiscuss $bookclubDiscuss = null)
    {
        $bookclubDiscuss->setUser($this);
        $this->bookclubDiscuss = $bookclubDiscuss;

        return $this;
    }

    /**
     * Get BookclubDiscuss entity (one to one).
     *
     * @return \Base\Entity\BookclubDiscuss
     */
    public function getBookclubDiscuss()
    {
        return $this->bookclubDiscuss;
    }

    /**
     * Add Menu entity to collection (one to many).
     *
     * @param \Base\Entity\Menu $menu
     * @return \Base\Entity\User
     */
    public function addMenu(Menu $menu)
    {
        $this->menus[] = $menu;

        return $this;
    }

    /**
     * Remove Menu entity from collection (one to many).
     *
     * @param \Base\Entity\Menu $menu
     * @return \Base\Entity\User
     */
    public function removeMenu(Menu $menu)
    {
        $this->menus->removeElement($menu);

        return $this;
    }

    /**
     * Get Menu entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMenus()
    {
        return $this->menus;
    }

    /**
     * Add Page entity to collection (one to many).
     *
     * @param \Base\Entity\Page $page
     * @return \Base\Entity\User
     */
    public function addPage(Page $page)
    {
        $this->pages[] = $page;

        return $this;
    }

    /**
     * Remove Page entity from collection (one to many).
     *
     * @param \Base\Entity\Page $page
     * @return \Base\Entity\User
     */
    public function removePage(Page $page)
    {
        $this->pages->removeElement($page);

        return $this;
    }

    /**
     * Get Page entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPages()
    {
        return $this->pages;
    }

    /**
     * Set Student entity (one to one).
     *
     * @param \Base\Entity\Student $student
     * @return \Base\Entity\User
     */
    public function setStudent(Student $student = null)
    {
        $student->setUser($this);
        $this->student = $student;

        return $this;
    }

    /**
     * Get Student entity (one to one).
     *
     * @return \Base\Entity\Student
     */
    public function getStudent()
    {
        return $this->student;
    }

    /**
     * Add Teacher entity to collection (one to many).
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\User
     */
    public function addTeacher(Teacher $teacher)
    {
        $this->teachers[] = $teacher;

        return $this;
    }

    /**
     * Remove Teacher entity from collection (one to many).
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\User
     */
    public function removeTeacher(Teacher $teacher)
    {
        $this->teachers->removeElement($teacher);

        return $this;
    }

    /**
     * Get Teacher entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTeachers()
    {
        return $this->teachers;
    }

    /**
     * Add UserHasRole entity to collection (one to many).
     *
     * @param \Base\Entity\UserHasRole $userHasRole
     * @return \Base\Entity\User
     */
    public function addUserHasRole(UserHasRole $userHasRole)
    {
        $this->userHasRoles[] = $userHasRole;

        return $this;
    }

    /**
     * Remove UserHasRole entity from collection (one to many).
     *
     * @param \Base\Entity\UserHasRole $userHasRole
     * @return \Base\Entity\User
     */
    public function removeUserHasRole(UserHasRole $userHasRole)
    {
        $this->userHasRoles->removeElement($userHasRole);

        return $this;
    }

    /**
     * Get UserHasRole entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserHasRoles()
    {
        return $this->userHasRoles;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'type',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'username',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'password',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'chinese_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'english_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'nickname',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'gender',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'identification_number',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'email',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'religion',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'status',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'create_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'update_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'alternate_email',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'type', 'username', 'password', 'chinese_name', 'english_name', 'nickname', 'gender', 'identification_number', 'email', 'religion', 'status', 'create_time', 'update_time', 'alternate_email');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'type', 'username', 'password', 'chinese_name', 'english_name', 'nickname', 'gender', 'identification_number', 'email', 'religion', 'status', 'create_time', 'update_time', 'alternate_email');
    }

    public function hashPassword($player, $password)
    {
        return ($player->getPassword() === md5($password));
    }
}