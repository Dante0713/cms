<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-19 02:38:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Bookclub
 *
 * @ORM\Entity(repositoryClass="BookclubRepository")
 * @ORM\Table(name="bookclub", indexes={@ORM\Index(name="fk_book_club_book_club_discuss1_idx", columns={"bookclub_discuss_id"})})
 */
class Bookclub implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $title;

    /**
     * @ORM\Column(type="date", nullable=true)
     */
    protected $since;

    /**
     * @ORM\Column(name="`statement`", type="string", length=200, nullable=true)
     */
    protected $statement;

    /**
     * 0: 不用核准
     *
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $join_type;

    /**
     * 停權否(0:是 1:否)
     *
     * @ORM\Column(name="`state`", type="string", length=45, nullable=true)
     */
    protected $state;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $gif;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $frame;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updatetime;

    /**
     * @ORM\Column(type="integer")
     */
    protected $bookclub_discuss_id;

    /**
     * @ORM\OneToMany(targetEntity="BookclubHasBookclubBillboard", mappedBy="bookclub")
     * @ORM\JoinColumn(name="id", referencedColumnName="bookclub_id", nullable=false)
     */
    protected $bookclubHasBookclubBillboards;

    /**
     * @ORM\OneToMany(targetEntity="BookclubHasStudent", mappedBy="bookclub")
     * @ORM\JoinColumn(name="id", referencedColumnName="bookclub_id", nullable=false)
     */
    protected $bookclubHasStudents;

    /**
     * @ORM\OneToOne(targetEntity="BookclubDiscuss", inversedBy="bookclub")
     * @ORM\JoinColumn(name="bookclub_discuss_id", referencedColumnName="id", nullable=false)
     */
    protected $bookclubDiscuss;

    public function __construct()
    {
        $this->bookclubHasBookclubBillboards = new ArrayCollection();
        $this->bookclubHasStudents = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Bookclub
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of title.
     *
     * @param string $title
     * @return \Base\Entity\Bookclub
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get the value of title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set the value of since.
     *
     * @param \DateTime $since
     * @return \Base\Entity\Bookclub
     */
    public function setSince($since)
    {
        $this->since = $since;

        return $this;
    }

    /**
     * Get the value of since.
     *
     * @return \DateTime
     */
    public function getSince()
    {
        return $this->since;
    }

    /**
     * Set the value of statement.
     *
     * @param string $statement
     * @return \Base\Entity\Bookclub
     */
    public function setStatement($statement)
    {
        $this->statement = $statement;

        return $this;
    }

    /**
     * Get the value of statement.
     *
     * @return string
     */
    public function getStatement()
    {
        return $this->statement;
    }

    /**
     * Set the value of join_type.
     *
     * @param boolean $join_type
     * @return \Base\Entity\Bookclub
     */
    public function setJoinType($join_type)
    {
        $this->join_type = $join_type;

        return $this;
    }

    /**
     * Get the value of join_type.
     *
     * @return boolean
     */
    public function getJoinType()
    {
        return $this->join_type;
    }

    /**
     * Set the value of state.
     *
     * @param string $state
     * @return \Base\Entity\Bookclub
     */
    public function setState($state)
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Get the value of state.
     *
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set the value of gif.
     *
     * @param string $gif
     * @return \Base\Entity\Bookclub
     */
    public function setGif($gif)
    {
        $this->gif = $gif;

        return $this;
    }

    /**
     * Get the value of gif.
     *
     * @return string
     */
    public function getGif()
    {
        return $this->gif;
    }

    /**
     * Set the value of frame.
     *
     * @param string $frame
     * @return \Base\Entity\Bookclub
     */
    public function setFrame($frame)
    {
        $this->frame = $frame;

        return $this;
    }

    /**
     * Get the value of frame.
     *
     * @return string
     */
    public function getFrame()
    {
        return $this->frame;
    }

    /**
     * Set the value of updatetime.
     *
     * @param \DateTime $updatetime
     * @return \Base\Entity\Bookclub
     */
    public function setUpdatetime($updatetime)
    {
        $this->updatetime = $updatetime;

        return $this;
    }

    /**
     * Get the value of updatetime.
     *
     * @return \DateTime
     */
    public function getUpdatetime()
    {
        return $this->updatetime;
    }

    /**
     * Set the value of bookclub_discuss_id.
     *
     * @param integer $bookclub_discuss_id
     * @return \Base\Entity\Bookclub
     */
    public function setBookclubDiscussId($bookclub_discuss_id)
    {
        $this->bookclub_discuss_id = $bookclub_discuss_id;

        return $this;
    }

    /**
     * Get the value of bookclub_discuss_id.
     *
     * @return integer
     */
    public function getBookclubDiscussId()
    {
        return $this->bookclub_discuss_id;
    }

    /**
     * Add BookclubHasBookclubBillboard entity to collection (one to many).
     *
     * @param \Base\Entity\BookclubHasBookclubBillboard $bookclubHasBookclubBillboard
     * @return \Base\Entity\Bookclub
     */
    public function addBookclubHasBookclubBillboard(BookclubHasBookclubBillboard $bookclubHasBookclubBillboard)
    {
        $this->bookclubHasBookclubBillboards[] = $bookclubHasBookclubBillboard;

        return $this;
    }

    /**
     * Remove BookclubHasBookclubBillboard entity from collection (one to many).
     *
     * @param \Base\Entity\BookclubHasBookclubBillboard $bookclubHasBookclubBillboard
     * @return \Base\Entity\Bookclub
     */
    public function removeBookclubHasBookclubBillboard(BookclubHasBookclubBillboard $bookclubHasBookclubBillboard)
    {
        $this->bookclubHasBookclubBillboards->removeElement($bookclubHasBookclubBillboard);

        return $this;
    }

    /**
     * Get BookclubHasBookclubBillboard entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBookclubHasBookclubBillboards()
    {
        return $this->bookclubHasBookclubBillboards;
    }

    /**
     * Add BookclubHasStudent entity to collection (one to many).
     *
     * @param \Base\Entity\BookclubHasStudent $bookclubHasStudent
     * @return \Base\Entity\Bookclub
     */
    public function addBookclubHasStudent(BookclubHasStudent $bookclubHasStudent)
    {
        $this->bookclubHasStudents[] = $bookclubHasStudent;

        return $this;
    }

    /**
     * Remove BookclubHasStudent entity from collection (one to many).
     *
     * @param \Base\Entity\BookclubHasStudent $bookclubHasStudent
     * @return \Base\Entity\Bookclub
     */
    public function removeBookclubHasStudent(BookclubHasStudent $bookclubHasStudent)
    {
        $this->bookclubHasStudents->removeElement($bookclubHasStudent);

        return $this;
    }

    /**
     * Get BookclubHasStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBookclubHasStudents()
    {
        return $this->bookclubHasStudents;
    }

    /**
     * Set BookclubDiscuss entity (one to one).
     *
     * @param \Base\Entity\BookclubDiscuss $bookclubDiscuss
     * @return \Base\Entity\Bookclub
     */
    public function setBookclubDiscuss(BookclubDiscuss $bookclubDiscuss)
    {
        $this->bookclubDiscuss = $bookclubDiscuss;

        return $this;
    }

    /**
     * Get BookclubDiscuss entity (one to one).
     *
     * @return \Base\Entity\BookclubDiscuss
     */
    public function getBookclubDiscuss()
    {
        return $this->bookclubDiscuss;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'title',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'since',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'statement',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'join_type',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'state',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'gif',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'frame',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'updatetime',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'bookclub_discuss_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'title', 'since', 'statement', 'join_type', 'state', 'gif', 'frame', 'updatetime', 'bookclub_discuss_id');
        $relationFields = array('bookclubDiscuss');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'title', 'since', 'statement', 'join_type', 'state', 'gif', 'frame', 'updatetime', 'bookclub_discuss_id');
    }
}