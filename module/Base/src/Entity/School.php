<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-19 02:38:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\School
 *
 * @ORM\Entity(repositoryClass="SchoolRepository")
 * @ORM\Table(name="school", uniqueConstraints={@ORM\UniqueConstraint(name="id_UNIQUE", columns={"id"})})
 */
class School implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(name="`type`", type="integer", nullable=true)
     */
    protected $type;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $chinese_name;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $english_name;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=500, nullable=true)
     */
    protected $address;

    /**
     * 學校官網
     *
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $url;

    /**
     * 電話區碼
     * 區碼+ 號碼 = 電話
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $dialing_code;

    /**
     * 號碼
     * 區碼+ 號碼 = 電話
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $phone;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $fax;

    /**
     * @ORM\Column(type="string", length=500, nullable=true)
     */
    protected $note;

    /**
     * @ORM\Column(name="`status`", type="integer", nullable=true)
     */
    protected $status;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updatetime;

    /**
     * @ORM\OneToMany(targetEntity="SchoolExt", mappedBy="school")
     * @ORM\JoinColumn(name="id", referencedColumnName="school_id", nullable=false)
     */
    protected $schoolExts;

    /**
     * @ORM\OneToMany(targetEntity="SchoolHasBook", mappedBy="school")
     * @ORM\JoinColumn(name="id", referencedColumnName="school_id", nullable=false)
     */
    protected $schoolHasBooks;

    /**
     * @ORM\OneToMany(targetEntity="SchoolHasStudent", mappedBy="school")
     * @ORM\JoinColumn(name="id", referencedColumnName="school_id", nullable=false)
     */
    protected $schoolHasStudents;

    /**
     * @ORM\OneToMany(targetEntity="SemesterClass", mappedBy="school")
     * @ORM\JoinColumn(name="id", referencedColumnName="school_id", nullable=false)
     */
    protected $semesterClasses;

    /**
     * @ORM\OneToMany(targetEntity="SemesterTeacher", mappedBy="school")
     * @ORM\JoinColumn(name="id", referencedColumnName="school_id", nullable=false)
     */
    protected $semesterTeachers;

    /**
     * @ORM\ManyToMany(targetEntity="Teacher", inversedBy="schools")
     * @ORM\JoinTable(name="school_has_teacher",
     *     joinColumns={@ORM\JoinColumn(name="school_id", referencedColumnName="id", nullable=false)},
     *     inverseJoinColumns={@ORM\JoinColumn(name="teacher_id", referencedColumnName="id", nullable=false)}
     * )
     */
    protected $teachers;

    public function __construct()
    {
        $this->schoolExts = new ArrayCollection();
        $this->schoolHasBooks = new ArrayCollection();
        $this->schoolHasStudents = new ArrayCollection();
        $this->semesterClasses = new ArrayCollection();
        $this->semesterTeachers = new ArrayCollection();
        $this->teachers = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\School
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of type.
     *
     * @param integer $type
     * @return \Base\Entity\School
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get the value of type.
     *
     * @return integer
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set the value of chinese_name.
     *
     * @param string $chinese_name
     * @return \Base\Entity\School
     */
    public function setChineseName($chinese_name)
    {
        $this->chinese_name = $chinese_name;

        return $this;
    }

    /**
     * Get the value of chinese_name.
     *
     * @return string
     */
    public function getChineseName()
    {
        return $this->chinese_name;
    }

    /**
     * Set the value of english_name.
     *
     * @param string $english_name
     * @return \Base\Entity\School
     */
    public function setEnglishName($english_name)
    {
        $this->english_name = $english_name;

        return $this;
    }

    /**
     * Get the value of english_name.
     *
     * @return string
     */
    public function getEnglishName()
    {
        return $this->english_name;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Base\Entity\School
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of address.
     *
     * @param string $address
     * @return \Base\Entity\School
     */
    public function setAddress($address)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get the value of address.
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set the value of url.
     *
     * @param string $url
     * @return \Base\Entity\School
     */
    public function setUrl($url)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get the value of url.
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set the value of dialing_code.
     *
     * @param integer $dialing_code
     * @return \Base\Entity\School
     */
    public function setDialingCode($dialing_code)
    {
        $this->dialing_code = $dialing_code;

        return $this;
    }

    /**
     * Get the value of dialing_code.
     *
     * @return integer
     */
    public function getDialingCode()
    {
        return $this->dialing_code;
    }

    /**
     * Set the value of phone.
     *
     * @param integer $phone
     * @return \Base\Entity\School
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get the value of phone.
     *
     * @return integer
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set the value of fax.
     *
     * @param string $fax
     * @return \Base\Entity\School
     */
    public function setFax($fax)
    {
        $this->fax = $fax;

        return $this;
    }

    /**
     * Get the value of fax.
     *
     * @return string
     */
    public function getFax()
    {
        return $this->fax;
    }

    /**
     * Set the value of note.
     *
     * @param string $note
     * @return \Base\Entity\School
     */
    public function setNote($note)
    {
        $this->note = $note;

        return $this;
    }

    /**
     * Get the value of note.
     *
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }

    /**
     * Set the value of status.
     *
     * @param integer $status
     * @return \Base\Entity\School
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of updatetime.
     *
     * @param \DateTime $updatetime
     * @return \Base\Entity\School
     */
    public function setUpdatetime($updatetime)
    {
        $this->updatetime = $updatetime;

        return $this;
    }

    /**
     * Get the value of updatetime.
     *
     * @return \DateTime
     */
    public function getUpdatetime()
    {
        return $this->updatetime;
    }

    /**
     * Add SchoolExt entity to collection (one to many).
     *
     * @param \Base\Entity\SchoolExt $schoolExt
     * @return \Base\Entity\School
     */
    public function addSchoolExt(SchoolExt $schoolExt)
    {
        $this->schoolExts[] = $schoolExt;

        return $this;
    }

    /**
     * Remove SchoolExt entity from collection (one to many).
     *
     * @param \Base\Entity\SchoolExt $schoolExt
     * @return \Base\Entity\School
     */
    public function removeSchoolExt(SchoolExt $schoolExt)
    {
        $this->schoolExts->removeElement($schoolExt);

        return $this;
    }

    /**
     * Get SchoolExt entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchoolExts()
    {
        return $this->schoolExts;
    }

    /**
     * Add SchoolHasBook entity to collection (one to many).
     *
     * @param \Base\Entity\SchoolHasBook $schoolHasBook
     * @return \Base\Entity\School
     */
    public function addSchoolHasBook(SchoolHasBook $schoolHasBook)
    {
        $this->schoolHasBooks[] = $schoolHasBook;

        return $this;
    }

    /**
     * Remove SchoolHasBook entity from collection (one to many).
     *
     * @param \Base\Entity\SchoolHasBook $schoolHasBook
     * @return \Base\Entity\School
     */
    public function removeSchoolHasBook(SchoolHasBook $schoolHasBook)
    {
        $this->schoolHasBooks->removeElement($schoolHasBook);

        return $this;
    }

    /**
     * Get SchoolHasBook entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchoolHasBooks()
    {
        return $this->schoolHasBooks;
    }

    /**
     * Add SchoolHasStudent entity to collection (one to many).
     *
     * @param \Base\Entity\SchoolHasStudent $schoolHasStudent
     * @return \Base\Entity\School
     */
    public function addSchoolHasStudent(SchoolHasStudent $schoolHasStudent)
    {
        $this->schoolHasStudents[] = $schoolHasStudent;

        return $this;
    }

    /**
     * Remove SchoolHasStudent entity from collection (one to many).
     *
     * @param \Base\Entity\SchoolHasStudent $schoolHasStudent
     * @return \Base\Entity\School
     */
    public function removeSchoolHasStudent(SchoolHasStudent $schoolHasStudent)
    {
        $this->schoolHasStudents->removeElement($schoolHasStudent);

        return $this;
    }

    /**
     * Get SchoolHasStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchoolHasStudents()
    {
        return $this->schoolHasStudents;
    }

    /**
     * Add SemesterClass entity to collection (one to many).
     *
     * @param \Base\Entity\SemesterClass $semesterClass
     * @return \Base\Entity\School
     */
    public function addSemesterClass(SemesterClass $semesterClass)
    {
        $this->semesterClasses[] = $semesterClass;

        return $this;
    }

    /**
     * Remove SemesterClass entity from collection (one to many).
     *
     * @param \Base\Entity\SemesterClass $semesterClass
     * @return \Base\Entity\School
     */
    public function removeSemesterClass(SemesterClass $semesterClass)
    {
        $this->semesterClasses->removeElement($semesterClass);

        return $this;
    }

    /**
     * Get SemesterClass entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSemesterClasses()
    {
        return $this->semesterClasses;
    }

    /**
     * Add SemesterTeacher entity to collection (one to many).
     *
     * @param \Base\Entity\SemesterTeacher $semesterTeacher
     * @return \Base\Entity\School
     */
    public function addSemesterTeacher(SemesterTeacher $semesterTeacher)
    {
        $this->semesterTeachers[] = $semesterTeacher;

        return $this;
    }

    /**
     * Remove SemesterTeacher entity from collection (one to many).
     *
     * @param \Base\Entity\SemesterTeacher $semesterTeacher
     * @return \Base\Entity\School
     */
    public function removeSemesterTeacher(SemesterTeacher $semesterTeacher)
    {
        $this->semesterTeachers->removeElement($semesterTeacher);

        return $this;
    }

    /**
     * Get SemesterTeacher entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSemesterTeachers()
    {
        return $this->semesterTeachers;
    }

    /**
     * Add Teacher entity to collection.
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\School
     */
    public function addTeacher(Teacher $teacher)
    {
        $teacher->addSchool($this);
        $this->teachers[] = $teacher;

        return $this;
    }

    /**
     * Remove Teacher entity from collection.
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\School
     */
    public function removeTeacher(Teacher $teacher)
    {
        $teacher->removeSchool($this);
        $this->teachers->removeElement($teacher);

        return $this;
    }

    /**
     * Get Teacher entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTeachers()
    {
        return $this->teachers;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'type',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'chinese_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'english_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'email',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'address',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'url',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'dialing_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'phone',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'fax',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'note',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'status',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'updatetime',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'type', 'chinese_name', 'english_name', 'email', 'address', 'url', 'dialing_code', 'phone', 'fax', 'note', 'status', 'updatetime');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'type', 'chinese_name', 'english_name', 'email', 'address', 'url', 'dialing_code', 'phone', 'fax', 'note', 'status', 'updatetime');
    }
}