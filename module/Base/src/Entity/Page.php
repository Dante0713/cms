<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-04-19 02:38:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Page
 *
 * @ORM\Entity(repositoryClass="PageRepository")
 * @ORM\Table(name="page", indexes={@ORM\Index(name="fk_page_menu1_idx", columns={"menu_id"}), @ORM\Index(name="fk_page_user1_idx", columns={"user_id"})})
 */
class Page implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $menu_id;

    /**
     * @ORM\Column(type="string", length=100, nullable=true)
     */
    protected $title;

    /**
     * @ORM\Column(type="text", nullable=true)
     */
    protected $content;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $create_time;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $update_time;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $hits;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $url;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $tags;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $term;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $kind;

    /**
     * @ORM\Column(type="string", length=10, nullable=true)
     */
    protected $url_target;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $order_id;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $link_menu;

    /**
     * @ORM\Column(type="text", nullable=true)
     */
    protected $summary;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $is_published;

    /**
     * @ORM\Column(type="integer")
     */
    protected $user_id;

    /**
     * @ORM\OneToMany(targetEntity="PageFile", mappedBy="page")
     * @ORM\JoinColumn(name="id", referencedColumnName="page_id", nullable=false)
     */
    protected $pageFiles;

    /**
     * @ORM\OneToMany(targetEntity="PageHasPageTag", mappedBy="page")
     * @ORM\JoinColumn(name="id", referencedColumnName="page_id", nullable=false)
     */
    protected $pageHasPageTags;

    /**
     * @ORM\ManyToOne(targetEntity="Menu", inversedBy="pages")
     * @ORM\JoinColumn(name="menu_id", referencedColumnName="id", nullable=false)
     */
    protected $menu;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="pages")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id", nullable=false)
     */
    protected $user;

    public function __construct()
    {
        $this->pageFiles = new ArrayCollection();
        $this->pageHasPageTags = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Page
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of menu_id.
     *
     * @param integer $menu_id
     * @return \Base\Entity\Page
     */
    public function setMenuId($menu_id)
    {
        $this->menu_id = $menu_id;

        return $this;
    }

    /**
     * Get the value of menu_id.
     *
     * @return integer
     */
    public function getMenuId()
    {
        return $this->menu_id;
    }

    /**
     * Set the value of title.
     *
     * @param string $title
     * @return \Base\Entity\Page
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get the value of title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set the value of content.
     *
     * @param string $content
     * @return \Base\Entity\Page
     */
    public function setContent($content)
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Get the value of content.
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set the value of create_time.
     *
     * @param \DateTime $create_time
     * @return \Base\Entity\Page
     */
    public function setCreateTime($create_time)
    {
        $this->create_time = $create_time;

        return $this;
    }

    /**
     * Get the value of create_time.
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    /**
     * Set the value of update_time.
     *
     * @param \DateTime $update_time
     * @return \Base\Entity\Page
     */
    public function setUpdateTime($update_time)
    {
        $this->update_time = $update_time;

        return $this;
    }

    /**
     * Get the value of update_time.
     *
     * @return \DateTime
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    /**
     * Set the value of hits.
     *
     * @param integer $hits
     * @return \Base\Entity\Page
     */
    public function setHits($hits)
    {
        $this->hits = $hits;

        return $this;
    }

    /**
     * Get the value of hits.
     *
     * @return integer
     */
    public function getHits()
    {
        return $this->hits;
    }

    /**
     * Set the value of url.
     *
     * @param string $url
     * @return \Base\Entity\Page
     */
    public function setUrl($url)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get the value of url.
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set the value of tags.
     *
     * @param string $tags
     * @return \Base\Entity\Page
     */
    public function setTags($tags)
    {
        $this->tags = $tags;

        return $this;
    }

    /**
     * Get the value of tags.
     *
     * @return string
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * Set the value of term.
     *
     * @param string $term
     * @return \Base\Entity\Page
     */
    public function setTerm($term)
    {
        $this->term = $term;

        return $this;
    }

    /**
     * Get the value of term.
     *
     * @return string
     */
    public function getTerm()
    {
        return $this->term;
    }

    /**
     * Set the value of kind.
     *
     * @param string $kind
     * @return \Base\Entity\Page
     */
    public function setKind($kind)
    {
        $this->kind = $kind;

        return $this;
    }

    /**
     * Get the value of kind.
     *
     * @return string
     */
    public function getKind()
    {
        return $this->kind;
    }

    /**
     * Set the value of url_target.
     *
     * @param string $url_target
     * @return \Base\Entity\Page
     */
    public function setUrlTarget($url_target)
    {
        $this->url_target = $url_target;

        return $this;
    }

    /**
     * Get the value of url_target.
     *
     * @return string
     */
    public function getUrlTarget()
    {
        return $this->url_target;
    }

    /**
     * Set the value of order_id.
     *
     * @param integer $order_id
     * @return \Base\Entity\Page
     */
    public function setOrderId($order_id)
    {
        $this->order_id = $order_id;

        return $this;
    }

    /**
     * Get the value of order_id.
     *
     * @return integer
     */
    public function getOrderId()
    {
        return $this->order_id;
    }

    /**
     * Set the value of link_menu.
     *
     * @param integer $link_menu
     * @return \Base\Entity\Page
     */
    public function setLinkMenu($link_menu)
    {
        $this->link_menu = $link_menu;

        return $this;
    }

    /**
     * Get the value of link_menu.
     *
     * @return integer
     */
    public function getLinkMenu()
    {
        return $this->link_menu;
    }

    /**
     * Set the value of summary.
     *
     * @param string $summary
     * @return \Base\Entity\Page
     */
    public function setSummary($summary)
    {
        $this->summary = $summary;

        return $this;
    }

    /**
     * Get the value of summary.
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->summary;
    }

    /**
     * Set the value of is_published.
     *
     * @param integer $is_published
     * @return \Base\Entity\Page
     */
    public function setIsPublished($is_published)
    {
        $this->is_published = $is_published;

        return $this;
    }

    /**
     * Get the value of is_published.
     *
     * @return integer
     */
    public function getIsPublished()
    {
        return $this->is_published;
    }

    /**
     * Set the value of user_id.
     *
     * @param integer $user_id
     * @return \Base\Entity\Page
     */
    public function setUserId($user_id)
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Get the value of user_id.
     *
     * @return integer
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Add PageFile entity to collection (one to many).
     *
     * @param \Base\Entity\PageFile $pageFile
     * @return \Base\Entity\Page
     */
    public function addPageFile(PageFile $pageFile)
    {
        $this->pageFiles[] = $pageFile;

        return $this;
    }

    /**
     * Remove PageFile entity from collection (one to many).
     *
     * @param \Base\Entity\PageFile $pageFile
     * @return \Base\Entity\Page
     */
    public function removePageFile(PageFile $pageFile)
    {
        $this->pageFiles->removeElement($pageFile);

        return $this;
    }

    /**
     * Get PageFile entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPageFiles()
    {
        return $this->pageFiles;
    }

    /**
     * Add PageHasPageTag entity to collection (one to many).
     *
     * @param \Base\Entity\PageHasPageTag $pageHasPageTag
     * @return \Base\Entity\Page
     */
    public function addPageHasPageTag(PageHasPageTag $pageHasPageTag)
    {
        $this->pageHasPageTags[] = $pageHasPageTag;

        return $this;
    }

    /**
     * Remove PageHasPageTag entity from collection (one to many).
     *
     * @param \Base\Entity\PageHasPageTag $pageHasPageTag
     * @return \Base\Entity\Page
     */
    public function removePageHasPageTag(PageHasPageTag $pageHasPageTag)
    {
        $this->pageHasPageTags->removeElement($pageHasPageTag);

        return $this;
    }

    /**
     * Get PageHasPageTag entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPageHasPageTags()
    {
        return $this->pageHasPageTags;
    }

    /**
     * Set Menu entity (many to one).
     *
     * @param \Base\Entity\Menu $menu
     * @return \Base\Entity\Page
     */
    public function setMenu(Menu $menu = null)
    {
        $this->menu = $menu;

        return $this;
    }

    /**
     * Get Menu entity (many to one).
     *
     * @return \Base\Entity\Menu
     */
    public function getMenu()
    {
        return $this->menu;
    }

    /**
     * Set User entity (many to one).
     *
     * @param \Base\Entity\User $user
     * @return \Base\Entity\Page
     */
    public function setUser(User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get User entity (many to one).
     *
     * @return \Base\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'menu_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'title',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'content',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'create_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'update_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'hits',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'url',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'tags',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'term',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'kind',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'url_target',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'order_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'link_menu',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'summary',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_published',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'user_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'menu_id', 'title', 'content', 'create_time', 'update_time', 'hits', 'url', 'tags', 'term', 'kind', 'url_target', 'order_id', 'link_menu', 'summary', 'is_published', 'user_id');
        $relationFields = array('menu', 'user');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'menu_id', 'title', 'content', 'create_time', 'update_time', 'hits', 'url', 'tags', 'term', 'kind', 'url_target', 'order_id', 'link_menu', 'summary', 'is_published', 'user_id');
    }
}